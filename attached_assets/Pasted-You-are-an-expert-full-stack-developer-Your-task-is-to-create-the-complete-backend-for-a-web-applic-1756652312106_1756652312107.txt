You are an expert full-stack developer. Your task is to create the complete backend for a web application called "ChitraLeap" using Python and the Flask web framework. This backend will power a simple frontend built with Builder.io.

Here are the detailed requirements:

**1. Project Setup:**
- Create a new Python Flask project.
- The project must include the following libraries in a `requirements.txt` file: `flask`, `openai`, `python-dotenv`, `flask_cors`.
- Create a `.env` file to securely store the OpenAI API key. The file should contain one line: `OPENAI_API_KEY='YOUR_API_KEY_HERE'`.
- The main application file should be named `app.py`.

**2. Backend Server (`app.py`):**
- Import all necessary libraries: `Flask`, `request`, `jsonify`, `os`, `openai`, `load_dotenv`, `CORS`.
- Load the environment variables from the `.env` file.
- Initialize the Flask app and enable CORS to allow requests from any origin, which is necessary for the Builder.io frontend.
- Set the OpenAI API key from the loaded environment variable.

**3. API Endpoint:**
- Create a single POST endpoint at the route `/generate-ad`.
- This endpoint must accept a JSON body with the following four string fields:
  - `product_description`: A description of the product or service (e.g., "Handmade silk sarees from Jaipur").
  - `target_audience`: Who the ad is for (e.g., "Women aged 25-40 for the upcoming festival season").
  - `offer`: Any special promotion (e.g., "20% off for Diwali").
  - `language`: The language for the ad copy (e.g., "Hinglish" or "Tamil").

**4. Core AI Logic inside the `/generate-ad` endpoint:**
- **Step A: Receive and Validate Input:** Get the JSON data from the incoming request. Check if all required fields are present.

- **Step B: First OpenAI Call (GPT-4 for Text and Image Prompts):**
  - Construct a detailed "meta-prompt" to send to the GPT-4 model. This prompt should instruct the AI to act as an expert advertising creative director for the Indian market.
  - The meta-prompt must ask the model to return a single, clean JSON object (and nothing else) with two keys:
    - `ad_copy`: An array of 3 different, compelling ad copy variations written in the specified `language`. Each variation should include a headline and a body.
    - `image_prompts`: An array of 3 highly descriptive, visually rich, and culturally specific prompts for the DALL-E 3 image generation model. These prompts should be in English and reflect Indian aesthetics, festivals, and the target audience. For example, instead of just "woman in a saree," it should be "A vibrant, festive scene in a Jaipur market during Diwali, a smiling woman in her early 30s is elegantly draping a beautiful handmade silk saree, with warm lighting from diyas creating a magical glow. Shot in a photorealistic style."
  - Make an API call to the OpenAI Chat Completions endpoint using the `gpt-4-turbo` model. Use the `response_format` parameter to ensure the output is a valid JSON object.

- **Step C: Second OpenAI Call (DALL-E 3 for Image Generation):**
  - Parse the JSON response from GPT-4 to extract the `image_prompts` array.
  - Create an empty list to store the generated image URLs.
  - Loop through each of the 3 image prompts from the `image_prompts` array.
  - Inside the loop, make an API call to the OpenAI Image Generation endpoint using the `dall-e-3` model for each prompt.
  - From the response of each DALL-E 3 call, extract the URL of the generated image and add it to your list of image URLs.

- **Step D: Final Response:**
  - Construct the final JSON response to send back to the frontend.
  - This response object should contain two keys:
    - `ad_copy`: The array of ad copy variations received from the GPT-4 call.
    - `image_urls`: The list of the 3 image URLs generated by the DALL-E 3 calls.
  - Return this final JSON object with a 200 OK status code.

**5. Error Handling:**
- Implement try-except blocks around the OpenAI API calls to handle potential errors (e.g., API failures, invalid keys).
- If an error occurs, return a JSON response with an appropriate error message and a 500 status code.

Please generate the complete, well-commented Python code for the `app.py` file based on these instructions.